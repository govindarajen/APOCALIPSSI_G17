const fs = require('fs');
const FormData = require('form-data');
const axios = require('axios');

async function testUpload() {
  try {
    console.log('üß™ Test d\'upload via API...\n');
    
    // Cr√©er un fichier PDF de test simple
    const testContent = `
RAPPORT DE S√âCURIT√â INFORMATIQUE
Entreprise XYZ - Audit 2025

R√âSUM√â EX√âCUTIF
L'audit de s√©curit√© informatique r√©v√®le plusieurs vuln√©rabilit√©s critiques n√©cessitant une action imm√©diate.

VULN√âRABILIT√âS IDENTIFI√âES
1. Mots de passe faibles sur 60% des comptes utilisateurs
2. Absence de chiffrement sur les donn√©es sensibles
3. Syst√®mes non mis √† jour depuis 6 mois
4. Acc√®s non contr√¥l√©s aux serveurs critiques

RECOMMANDATIONS URGENTES
- Mise en place d'une politique de mots de passe renforc√©e
- Chiffrement imm√©diat des donn√©es sensibles
- Mise √† jour de s√©curit√© de tous les syst√®mes
- Audit des acc√®s et r√©vocation des droits non n√©cessaires

NIVEAU DE RISQUE: √âLEV√â
Action requise dans les 48 heures.
    `;
    
    // √âcrire le contenu dans un fichier temporaire
    fs.writeFileSync('./temp-test.txt', testContent);
    
    // Cr√©er un FormData pour simuler l'upload
    const formData = new FormData();
    formData.append('document', fs.createReadStream('./temp-test.txt'), {
      filename: 'rapport-securite.pdf',
      contentType: 'application/pdf'
    });
    
    console.log('üì§ Envoi du fichier √† l\'API...');
    
    // Envoyer √† l'API
    const response = await axios.post('http://localhost:5000/api/documents/upload', formData, {
      headers: {
        ...formData.getHeaders()
      },
      timeout: 30000
    });
    
    if (response.data.success) {
      console.log('‚úÖ Upload r√©ussi!\n');
      
      const result = response.data.data;
      
      console.log('üìä R√âSULTAT DE L\'ANALYSE:');
      console.log('=' .repeat(50));
      
      console.log('\nüìù R√âSUM√â:');
      console.log(result.executiveSummary);
      
      console.log('\nüîç POINTS CL√âS:');
      result.keyPoints.forEach((point, index) => {
        console.log(`${index + 1}. ${point}`);
      });
      
      console.log('\nüí° ACTIONS:');
      result.actionSuggestions.forEach((action, index) => {
        console.log(`${index + 1}. [${action.priority.toUpperCase()}] ${action.title}`);
      });
      
      console.log('\nüìà M√âTADONN√âES:');
      Object.entries(result.metadata).forEach(([key, value]) => {
        console.log(`   ${key}: ${value}`);
      });
      
    } else {
      console.error('‚ùå √âchec de l\'upload:', response.data.message);
    }
    
    // Nettoyer le fichier temporaire
    fs.unlinkSync('./temp-test.txt');
    
  } catch (error) {
    console.error('‚ùå Erreur:', error.message);
    if (error.response) {
      console.error('D√©tails:', error.response.data);
    }
  }
}

testUpload();
